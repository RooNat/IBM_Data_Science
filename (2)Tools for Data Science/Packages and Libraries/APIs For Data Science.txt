Welcome to “Application Program Interfaces (API).” After watching this video, you will be able to define an API, list API libraries, and define REST API in relation
to request and response. An application programming interface (API) allows
communication between two pieces of software. For example, in a program, you have
some data and other software components. You use the API to communicate using inputs and outputs without knowing
what happens at the backend. The API only refers to the interface. It is the part of the library you see while it
contains all the program components. To further understand how
an API works in a library, consider an example of the Pandas library. Pandas is a set of software components where
not all components are written in Python. In your program, there is some data
and a set of software components. You can use the Pandas API to process the data by
communicating with the other software components. The software component at
the back end can be the same, but there can be an API for different languages. Consider TensorFlow at the backend, written in C++
that can use APIs for other languages, such as: Python JavaScript C++ Java, and Go And thus, the API is just the interface. Other volunteer-developed APIs for TensorFlow are Julia Matlab R Scala And many more. So, REST APIs are another popular type of API. The RE stands for Representational. The S
stands for State. The T stands for Transfer. They allow you to communicate through
the internet and take advantage of resources like storage, data, artificially
intelligent algorithms, and much more. In Rest API, your program is the client. The API communicates with a web service
you can call through the internet. Though there are rules regarding Communication,
Input or Request, and Output or Response. So, let’s look at some common
terms used with regards to API. You or your code is the client. The web service is the resource. And the client finds the service via an endpoint. The client sends requests to the resource
and receives a response from the resource. Data is transmitted over the
internet using HTTP methods. The Rest APIs get all the information
from the request sent by the client. The request is sent using an HTTP
message that contains a JSON file. The file contains instructions for what
operation is to be performed by the web service. This operation is transmitted to
the web service via the internet. And the service performs the operation. Similarly, the web service returns
a response through an HTTP message, where the information is
returned using a JSON file. And this information is
transmitted back to the client. Now, another example of a Rest API
is Watson Text to Speech API. This API converts speech to text. In the API call, you will send a copy of the audio
file to the API; this is called a post request. Then the API will send the text transcription
of what the individual is saying. At the backend, the API is making a Get request. And finally, let’s look at another example,
the Watson language-translator API. You send the text you would like to translate
into Watson language-translator API. The API will translate the text and send
the translation back to you. In this case, the API translates English to Spanish. In this video, you learned an application programming interface (API) allows
communication between two pieces of software, An API is the part of the library you see while the library contains all the
components of the program. And REST APIs allow you to communicate through
the internet and take advantage of resources like storage, data, artificially
intelligent algorithms, and much more.